require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PartApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PartApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PartApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PartApi' do
    it 'should create an instance of PartApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PartApi)
    end
  end

  # unit tests for create_part
  # Create a new part
  # Creates a part in your sevdesk inventory.
  # @param [Hash] opts the optional parameters
  # @option opts [ModelPart] :model_part Creation data. Please be aware, that you need to provide at least all required parameter      of the part model!
  # @return [ModelPart]
  describe 'create_part test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_part_by_id
  # Find part by ID
  # Returns a single part
  # @param part_id ID of part to return
  # @param [Hash] opts the optional parameters
  # @return [GetParts200Response]
  describe 'get_part_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_parts
  # Retrieve parts
  # Retrieve all parts in your sevdesk inventory according to the applied filters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :part_number Retrieve all parts with this part number
  # @option opts [String] :name Retrieve all parts with this name
  # @return [GetParts200Response]
  describe 'get_parts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for part_get_stock
  # Get stock of a part
  # Returns the current stock amount of the given part.
  # @param part_id ID of part for which you want the current stock.
  # @param [Hash] opts the optional parameters
  # @return [PartGetStock200Response]
  describe 'part_get_stock test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_part
  # Update an existing part
  # Update a part
  # @param part_id ID of part to update
  # @param [Hash] opts the optional parameters
  # @option opts [ModelPartUpdate] :model_part_update Update data
  # @return [ModelPart]
  describe 'update_part test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
