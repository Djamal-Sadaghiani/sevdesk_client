require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::OrderApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OrderApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::OrderApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrderApi' do
    it 'should create an instance of OrderApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::OrderApi)
    end
  end

  # unit tests for create_contract_note_from_order
  # Create contract note from order
  # Create contract note from order
  # @param order_id the id of the order
  # @param order_object_name Model name, which is &#39;Order&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [ModelCreatePackingListFromOrder] :model_create_packing_list_from_order Create contract note
  # @return [ModelOrderResponse]
  describe 'create_contract_note_from_order test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_order
  # Create a new order
  # Creates an order to which positions can be added later.
  # @param [Hash] opts the optional parameters
  # @option opts [SaveOrder] :save_order Creation data. Please be aware, that you need to provide at least all required parameter      of the order model!
  # @return [SaveOrderResponse]
  describe 'create_order test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_packing_list_from_order
  # Create packing list from order
  # Create packing list from order
  # @param order_id the id of the order
  # @param order_object_name Model name, which is &#39;Order&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [ModelCreatePackingListFromOrder] :model_create_packing_list_from_order Create packing list
  # @return [ModelOrderResponse]
  describe 'create_packing_list_from_order test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_order
  # Deletes an order
  # @param order_id Id of order resource to delete
  # @param [Hash] opts the optional parameters
  # @return [DeleteCheckAccount200Response]
  describe 'delete_order test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_discounts
  # Find order discounts
  # Returns all discounts of an order
  # @param order_id ID of order to return the positions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limits the number of entries returned
  # @option opts [Integer] :offset set the index where the returned entries start
  # @option opts [Array<String>] :embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
  # @return [GetDiscounts200Response]
  describe 'get_discounts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_order_by_id
  # Find order by ID
  # Returns a single order
  # @param order_id ID of order to return
  # @param [Hash] opts the optional parameters
  # @return [GetOrders200Response]
  describe 'get_order_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_order_positions_by_id
  # Find order positions
  # Returns all positions of an order
  # @param order_id ID of order to return the positions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limits the number of entries returned
  # @option opts [Integer] :offset set the index where the returned entries start
  # @option opts [Array<String>] :embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
  # @return [GetOrderPositionsById200Response]
  describe 'get_order_positions_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orders
  # Retrieve orders
  # There are a multitude of parameter which can be used to filter. A few of them are attached but      for a complete list please check out &lt;a href&#x3D;&#39;#tag/Order/How-to-filter-for-certain-orders&#39;&gt;this&lt;/a&gt; list
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :status Status of the order
  # @option opts [String] :order_number Retrieve all orders with this order number
  # @option opts [Integer] :start_date Retrieve all orders with a date equal or higher
  # @option opts [Integer] :end_date Retrieve all orders with a date equal or lower
  # @option opts [Integer] :contact_id Retrieve all orders with this contact. Must be provided with contact[objectName]
  # @option opts [String] :contact_object_name Only required if contact[id] was provided. &#39;Contact&#39; should be used as value.
  # @return [GetOrders200Response]
  describe 'get_orders test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_related_objects
  # Find related objects
  # Get related objects of a specified order
  # @param order_id ID of order to return the positions
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_itself Define if the related objects include the order itself
  # @option opts [Boolean] :sort_by_type Define if you want the related objects sorted by type
  # @option opts [Array<String>] :embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
  # @return [GetOrderPositionsById200Response]
  describe 'get_related_objects test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for order_get_pdf
  # Retrieve pdf document of an order
  # Retrieves the pdf document of an order with additional metadata and commit the order.
  # @param order_id ID of order from which you want the pdf
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download If u want to download the pdf of the order.
  # @option opts [Boolean] :prevent_send_by Defines if u want to send the order.
  # @return [OrderGetPdf200Response]
  describe 'order_get_pdf test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for order_send_by
  # Mark order as sent
  # Marks an order as sent by a chosen send type.
  # @param order_id ID of order to mark as sent
  # @param [Hash] opts the optional parameters
  # @option opts [OrderSendByRequest] :order_send_by_request Specify the send type
  # @return [ModelOrderResponse]
  describe 'order_send_by test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sendorder_via_e_mail
  # Send order via email
  # This endpoint sends the specified order to a customer via email.&lt;br&gt;      This will automatically mark the order as sent.&lt;br&gt;      Please note, that in production an order is not allowed to be changed after this happened!
  # @param order_id ID of order to be sent via email
  # @param [Hash] opts the optional parameters
  # @option opts [SendorderViaEMailRequest] :sendorder_via_e_mail_request Mail data
  # @return [SendorderViaEMail201Response]
  describe 'sendorder_via_e_mail test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_order
  # Update an existing order
  # Update an order
  # @param order_id ID of order to update
  # @param [Hash] opts the optional parameters
  # @option opts [ModelOrderUpdate] :model_order_update Update data
  # @return [ModelOrderResponse]
  describe 'update_order test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
