require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::InvoiceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'InvoiceApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::InvoiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InvoiceApi' do
    it 'should create an instance of InvoiceApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::InvoiceApi)
    end
  end

  # unit tests for book_invoice
  # Book an invoice
  # Booking the invoice with a transaction is probably the most important part in the bookkeeping process.&lt;br&gt; There are several ways on correctly booking an invoice, all by using the same endpoint.&lt;br&gt; for more information look &lt;a href&#x3D;&#39;#tag/Invoice/How-to-book-an-invoice&#39;&gt;here&lt;/a&gt;.
  # @param invoice_id ID of invoice to book
  # @param [Hash] opts the optional parameters
  # @option opts [BookInvoiceRequest] :book_invoice_request Booking data
  # @return [BookInvoice200Response]
  describe 'book_invoice test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cancel_invoice
  # Cancel an invoice / Create cancellation invoice
  # This endpoint will cancel the specified invoice therefor creating a cancellation invoice.&lt;br&gt;       The cancellation invoice will be automatically paid and the source invoices status will change to &#39;cancelled&#39;.
  # @param invoice_id ID of invoice to be cancelled
  # @param [Hash] opts the optional parameters
  # @return [ModelInvoiceResponse]
  describe 'cancel_invoice test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_invoice_by_factory
  # Create a new invoice
  # This endpoint offers you the following functionality.       &lt;ul&gt;          &lt;li&gt;Create invoices together with positions and discounts&lt;/li&gt;          &lt;li&gt;Delete positions while adding new ones&lt;/li&gt;          &lt;li&gt;Delete or add discounts, or both at the same time&lt;/li&gt;          &lt;li&gt;Automatically fill the address of the supplied contact into the invoice address&lt;/li&gt;       &lt;/ul&gt;       To make your own request sample slimmer, you can omit all parameters which are not required and nullable.       However, for a valid and logical bookkeeping document, you will also need some of them to ensure that all the necessary data is in the invoice.&lt;br&gt;&lt;br&gt; The list of parameters starts with the invoice array.&lt;br&gt; This array contains all required attributes for a complete invoice.&lt;br&gt; Most of the attributes are covered in the invoice attribute list, there are only two parameters standing out, namely &lt;b&gt;mapAll&lt;/b&gt; and &lt;b&gt;objectName&lt;/b&gt;.&lt;br&gt; These are just needed for our system and you always need to provide them.&lt;br&gt;&lt;br&gt; The list of parameters then continues with the invoice position array.&lt;br&gt; With this array you have the possibility to add multiple positions at once.&lt;br&gt; In the example it only contains one position, again together with the parameters &lt;b&gt;mapAll&lt;/b&gt; and &lt;b&gt;objectName&lt;/b&gt;, however, you can add more invoice positions by extending the array.&lt;br&gt; So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \&quot;1\&quot; instead of \&quot;0\&quot;.&lt;br&gt;&lt;br&gt; The list ends with the four parameters invoicePosDelete, discountSave, discountDelete and takeDefaultAddress.&lt;br&gt; They only play a minor role if you only want to create an invoice but we will shortly explain what they can do.&lt;br&gt; With invoicePosDelete you have to option to delete invoice positions as this request can also be used to update invoices.&lt;br&gt; With discountSave you can add discounts to your invoice.&lt;br&gt; With discountDelete you can delete discounts from your invoice.&lt;br&gt; With takeDefaultAddress you can specify that the first address of the contact you are using for the invoice is taken for the invoice address attribute automatically, so you don&#39;t need to provide the address yourself.&lt;br&gt; If you want to know more about these parameters, for example if you want to use this request to update invoices, feel free to contact our support.&lt;br&gt;&lt;br&gt; Finally, after covering all parameters, they only important information left, is that the order of the last four attributes always needs to be kept.&lt;br&gt; You will also always need to provide all of them, as otherwise the request won&#39;t work properly.&lt;br&gt;&lt;br&gt; &lt;b&gt;Warning:&lt;/b&gt; You can not create a regular invoice with the &lt;b&gt;deliveryDate&lt;/b&gt; being later than the &lt;b&gt;invoiceDate&lt;/b&gt;.&lt;br&gt; To do that you will need to create a so called &lt;b&gt;Abschlagsrechnung&lt;/b&gt; by setting the &lt;b&gt;invoiceType&lt;/b&gt; parameter to &lt;b&gt;AR&lt;/b&gt;.
  # @param [Hash] opts the optional parameters
  # @option opts [SaveInvoice] :save_invoice Creation data. Please be aware, that you need to provide at least all required parameter      of the invoice model!
  # @return [SaveInvoiceResponse]
  describe 'create_invoice_by_factory test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_invoice_from_order
  # Create invoice from order
  # Create an invoice from an order
  # @param [Hash] opts the optional parameters
  # @option opts [ModelCreateInvoiceFromOrder] :model_create_invoice_from_order Create invoice
  # @return [ModelInvoiceResponse]
  describe 'create_invoice_from_order test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_invoice_reminder
  # Create invoice reminder
  # Create an reminder from an invoice
  # @param invoice_id the id of the invoice
  # @param invoice_object_name Model name, which is &#39;Invoice&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [CreateInvoiceReminderRequest] :create_invoice_reminder_request Create invoice
  # @return [ModelInvoiceResponse]
  describe 'create_invoice_reminder test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_invoice_by_id
  # Find invoice by ID
  # Returns a single invoice
  # @param invoice_id ID of invoice to return
  # @param [Hash] opts the optional parameters
  # @return [GetInvoices200Response]
  describe 'get_invoice_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_invoice_positions_by_id
  # Find invoice positions
  # Returns all positions of an invoice
  # @param invoice_id ID of invoice to return the positions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limits the number of entries returned
  # @option opts [Integer] :offset set the index where the returned entries start
  # @option opts [Array<String>] :embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
  # @return [GetInvoicePositionsById200Response]
  describe 'get_invoice_positions_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_invoices
  # Retrieve invoices
  # There are a multitude of parameter which can be used to filter. A few of them are attached but       for a complete list please check out &lt;a href&#x3D;&#39;#tag/Invoice/How-to-filter-for-certain-invoices&#39;&gt;this&lt;/a&gt; list
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :status Status of the invoices
  # @option opts [String] :invoice_number Retrieve all invoices with this invoice number
  # @option opts [Integer] :start_date Retrieve all invoices with a date equal or higher
  # @option opts [Integer] :end_date Retrieve all invoices with a date equal or lower
  # @option opts [Integer] :contact_id Retrieve all invoices with this contact. Must be provided with contact[objectName]
  # @option opts [String] :contact_object_name Only required if contact[id] was provided. &#39;Contact&#39; should be used as value.
  # @return [GetInvoices200Response]
  describe 'get_invoices test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_is_invoice_partially_paid
  # Check if an invoice is already partially paid
  # Returns &#39;true&#39; if the given invoice is partially paid - &#39;false&#39; if it is not.      Invoices which are completely paid are regarded as not partially paid.
  # @param invoice_id ID of invoice to return
  # @param [Hash] opts the optional parameters
  # @return [ContactCustomerNumberAvailabilityCheck200Response]
  describe 'get_is_invoice_partially_paid test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_enshrine
  # Enshrine
  # Sets the current date and time as a value for the property &#x60;enshrined&#x60;.&lt;br&gt; This operation is only possible if the status is \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;) or higher.  Enshrined invoices cannot be changed. This operation cannot be undone. 
  # @param invoice_id ID of the invoice to enshrine
  # @param [Hash] opts the optional parameters
  # @return [CheckAccountTransactionEnshrine200Response]
  describe 'invoice_enshrine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_get_pdf
  # Retrieve pdf document of an invoice
  # Retrieves the pdf document of an invoice with additional metadata.
  # @param invoice_id ID of invoice from which you want the pdf
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download If u want to download the pdf of the invoice.
  # @option opts [Boolean] :prevent_send_by Defines if u want to send the invoice.
  # @return [InvoiceGetPdf200Response]
  describe 'invoice_get_pdf test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_get_xml
  # Retrieve XML of an e-invoice
  # Retrieves the XML of an e-invoice
  # @param invoice_id ID of invoice from which you want the XML
  # @param [Hash] opts the optional parameters
  # @return [InvoiceGetXml200Response]
  describe 'invoice_get_xml test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_render
  # Render the pdf document of an invoice
  # Using this endpoint you can render the pdf document of an invoice.&lt;br&gt;       Use cases for this are the retrieval of the pdf location or the forceful re-render of a already sent invoice.&lt;br&gt;       Please be aware that changing an invoice after it has been sent to a customer is not an allowed bookkeeping process.
  # @param invoice_id ID of invoice to render
  # @param [Hash] opts the optional parameters
  # @option opts [InvoiceRenderRequest] :invoice_render_request Define if the document should be forcefully re-rendered.
  # @return [InvoiceRender201Response]
  describe 'invoice_render test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_reset_to_draft
  # Reset status to draft
  # Resets the status to \&quot;Draft\&quot; (&#x60;\&quot;status\&quot;: \&quot;100\&quot;&#x60;).&lt;br&gt; This is only possible if the invoice has the status \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;).&lt;br&gt; If it has a higher status use [Invoice/{invoiceId}/resetToOpen](#tag/Invoice/operation/invoiceResetToOpen) first.  This endpoint cannot be used for recurring invoices (&#x60;\&quot;invoiceType\&quot;: \&quot;WKR\&quot;&#x60;).&lt;br&gt; Use [Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory) instead. 
  # @param invoice_id ID of the invoice to reset
  # @param [Hash] opts the optional parameters
  # @return [InvoiceResetToDraft200Response]
  describe 'invoice_reset_to_draft test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_reset_to_open
  # Reset status to open
  # Resets the status \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;). Linked transactions will be unlinked.&lt;br&gt; This is not possible if the invoice itself or one of its transactions (CheckAccountTransaction) is already enshrined.  This endpoint cannot be used to increase the status to \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;).&lt;br&gt; Use [Invoice/{invoiceId}/sendBy](#tag/Invoice/operation/invoiceSendBy) / [Invoice/{invoiceId}/sendViaEmail](#tag/Invoice/operation/sendInvoiceViaEMail) instead.  This endpoint cannot be used for recurring invoices (&#x60;\&quot;invoiceType\&quot;: \&quot;WKR\&quot;&#x60;). Use [Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory) instead. 
  # @param invoice_id ID of the invoice to reset
  # @param [Hash] opts the optional parameters
  # @return [InvoiceResetToOpen200Response]
  describe 'invoice_reset_to_open test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for invoice_send_by
  # Mark invoice as sent
  # Marks an invoice as sent by a chosen send type.
  # @param invoice_id ID of invoice to mark as sent
  # @param [Hash] opts the optional parameters
  # @option opts [InvoiceSendByRequest] :invoice_send_by_request Specify the send type
  # @return [ModelInvoiceResponse]
  describe 'invoice_send_by test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for send_invoice_via_e_mail
  # Send invoice via email
  # This endpoint sends the specified invoice to a customer via email.&lt;br&gt;      This will automatically mark the invoice as sent.&lt;br&gt;      Please note, that in production an invoice is not allowed to be changed after this happened!
  # @param invoice_id ID of invoice to be sent via email
  # @param [Hash] opts the optional parameters
  # @option opts [SendInvoiceViaEMailRequest] :send_invoice_via_e_mail_request Mail data
  # @return [ModelEmail]
  describe 'send_invoice_via_e_mail test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
