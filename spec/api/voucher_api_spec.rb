require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::VoucherApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'VoucherApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::VoucherApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VoucherApi' do
    it 'should create an instance of VoucherApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::VoucherApi)
    end
  end

  # unit tests for book_voucher
  # Book a voucher
  # Booking the voucher with a transaction is probably the most important part in the bookkeeping process.&lt;br&gt; There are several ways on correctly booking a voucher, all by using the same endpoint.&lt;br&gt; Conveniently, the booking process is exactly the same as the process for invoices.&lt;br&gt; For this reason, you can have a look at it &lt;a href&#x3D;&#39;#tag/Voucher/How-to-filter-for-certain-vouchers&#39;&gt;here&lt;/a&gt; and all you need to to is to change \&quot;Invoice\&quot; into \&quot;Voucher\&quot; in the URL.
  # @param voucher_id ID of voucher to book
  # @param [Hash] opts the optional parameters
  # @option opts [BookVoucherRequest] :book_voucher_request Booking data
  # @return [BookVoucher200Response]
  describe 'book_voucher test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for for_account_number
  # Get guidance by account number
  # You can use this endpoint to get additional information about the account that you may want to use.
  # @param account_number The datev account number you want to get additional information of
  # @param [Hash] opts the optional parameters
  # @return [ForAllAccounts200Response]
  describe 'for_account_number test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for for_all_accounts
  # Get all account guides
  # You can use this endpoint to help you decide which accounts you can use when creating a voucher
  # @param [Hash] opts the optional parameters
  # @return [ForAllAccounts200Response]
  describe 'for_all_accounts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for for_expense
  # Get guidance for expense accounts
  # Provides all possible combinations for expense accounts to be used with expense receipts/vouchers.
  # @param [Hash] opts the optional parameters
  # @return [ForAllAccounts200Response]
  describe 'for_expense test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for for_revenue
  # Get guidance for revenue accounts
  # Provides all possible combinations for revenue accounts to be used with revenue receipts/vouchers.
  # @param [Hash] opts the optional parameters
  # @return [ForAllAccounts200Response]
  describe 'for_revenue test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for for_tax_rule
  # Get guidance by Tax Rule
  # You can use this endpoint to get additional information about the tax rule (for example, USTPFL_UMS_EINN) that you may want to use.
  # @param tax_rule The code of the tax rule you want to get guidance for.
  # @param [Hash] opts the optional parameters
  # @return [ForAllAccounts200Response]
  describe 'for_tax_rule test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_voucher_by_id
  # Find voucher by ID
  # Returns a single voucher
  # @param voucher_id ID of voucher to return
  # @param [Hash] opts the optional parameters
  # @return [GetVouchers200Response]
  describe 'get_voucher_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_vouchers
  # Retrieve vouchers
  # There are a multitude of parameter which can be used to filter. A few of them are attached but      for a complete list please check out &lt;a href&#x3D;&#39;#tag/Voucher/How-to-filter-for-certain-vouchers&#39;&gt;this&lt;/a&gt; list
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :status Status of the vouchers to retrieve.
  # @option opts [String] :credit_debit Define if you only want credit or debit vouchers.
  # @option opts [String] :description_like Retrieve all vouchers with a description like this.
  # @option opts [Integer] :start_date Retrieve all vouchers with a date equal or higher
  # @option opts [Integer] :end_date Retrieve all vouchers with a date equal or lower
  # @option opts [Integer] :contact_id Retrieve all vouchers with this contact. Must be provided with contact[objectName]
  # @option opts [String] :contact_object_name Only required if contact[id] was provided. &#39;Contact&#39; should be used as value.
  # @return [GetVouchers200Response]
  describe 'get_vouchers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_voucher
  # Update an existing voucher
  # Update a draft voucher using this method if you want to change simple values like the description. Complex changes like adding a position should use /Voucher/Factory/saveVoucher.&lt;br&gt; You can not change the status using this endpoint.
  # @param voucher_id ID of voucher to update
  # @param [Hash] opts the optional parameters
  # @option opts [ModelVoucherUpdate] :model_voucher_update Update data
  # @return [ModelVoucherResponse]
  describe 'update_voucher test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for voucher_enshrine
  # Enshrine
  # Sets the current date and time as a value for the property &#x60;enshrined&#x60;.&lt;br&gt; This operation is only possible if the status is \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;100\&quot;&#x60;) or higher.  Enshrined vouchers cannot be changed. This operation cannot be undone. 
  # @param voucher_id ID of the voucher to enshrine
  # @param [Hash] opts the optional parameters
  # @return [CheckAccountTransactionEnshrine200Response]
  describe 'voucher_enshrine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for voucher_factory_save_voucher
  # Create a new voucher
  # Bundles the creation or updating of voucher and voucher position.&lt;br&gt; The list of parameters starts with the voucher model.&lt;br&gt; This contains all required attributes for a complete voucher.&lt;br&gt; Most of the attributes are covered in the voucher attribute list, there are only two parameters standing out, namely &lt;b&gt;mapAll&lt;/b&gt; and &lt;b&gt;objectName&lt;/b&gt;.&lt;br&gt; These are just needed for our system and you always need to provide them.&lt;br&gt;&lt;br&gt; The list of parameters then continues with the voucher position array.&lt;br&gt; With this array you have the possibility to add multiple positions at once.&lt;br&gt; In the example it only contains one position, again together with the parameters &lt;b&gt;mapAll&lt;/b&gt; and &lt;b&gt;objectName&lt;/b&gt;, however, you can add more voucher positions by extending the array.&lt;br&gt; So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \\\&quot;1\\\&quot; instead of \\\&quot;0\\\&quot;.&lt;br&gt;&lt;br&gt; The list ends with the two parameters voucherPosDelete and filename.&lt;br&gt; We will shortly explain what they can do.&lt;br&gt; With voucherPosDelete you can delete voucher positions as this request can also be used to update draft vouchers.&lt;br&gt; With filename you can attach a file to the voucher.&lt;br&gt; For most of our customers this is a really important step, as they need to digitize their receipts.&lt;br&gt; Finally, after covering all parameters, the only important information left, is that the order of the last two attributes always needs to be kept. &lt;br&gt;&lt;br&gt; The only valid status values for this endpoint are 50 (draft) and 100 (open). You can only update draft vouchers. If you have to, you can downgrade the status by calling resetToOpen (from paid) and resetToDraft (from open).
  # @param [Hash] opts the optional parameters
  # @option opts [SaveVoucher] :save_voucher Creation data. Please be aware, that you need to provide at least all required parameters of the voucher and voucher position model!
  # @return [SaveVoucherResponse]
  describe 'voucher_factory_save_voucher test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for voucher_reset_to_draft
  # Reset status to draft
  # Resets the status \&quot;Draft\&quot; (&#x60;\&quot;status\&quot;: \&quot;50\&quot;&#x60;). Linked payments will be unlinked. Created asset depreciation will be reset.&lt;br&gt; This is not possible if the voucher is already enshrined!  You can only change the status from higher to lower (\&quot;Open\&quot; to \&quot;Draft\&quot;).&lt;br&gt; To change to higher status use [/Voucher/Factory/saveVoucher](#tag/Voucher/operation/voucherFactorySaveVoucher). 
  # @param voucher_id ID of the voucher to reset
  # @param [Hash] opts the optional parameters
  # @return [VoucherResetToOpen200Response]
  describe 'voucher_reset_to_draft test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for voucher_reset_to_open
  # Reset status to open
  # Resets the status to \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;100\&quot;&#x60;). Linked payments will be unlinked. Created asset depreciation will be reset.&lt;br&gt; This is not possible if the voucher is already enshrined!  This endpoint can not be used to increase the status from \&quot;Draft\&quot; to \&quot;Open\&quot;.&lt;br&gt; You can only change the status from higher to lower (\&quot;Open\&quot; to \&quot;Draft\&quot;).&lt;br&gt; To change to higher status use [Voucher/{voucherId}/bookAmount](#tag/Voucher/operation/bookVoucher). To change to lower status use [Voucher/{voucherId}/resetToDraft](#tag/Voucher/operation/voucherResetToDraft). 
  # @param voucher_id ID of the voucher to reset
  # @param [Hash] opts the optional parameters
  # @return [VoucherResetToOpen200Response]
  describe 'voucher_reset_to_open test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for voucher_upload_file
  # Upload voucher file
  # To attach a document to a voucher, you will need to upload it first for later use.&lt;br&gt; To do this, you can use this request.&lt;br&gt; When you successfully uploaded the file, you will get a sevdesk internal filename in the response.&lt;br&gt; The filename will be a hash generated from your uploaded file. You will need it in the next request!&lt;br&gt; After you got the just mentioned filename, you can enter it as a value for the filename parameter of the saveVoucher request.&lt;br&gt; If you provided all necessary parameters and kept all of them in the right order, the file will be attached to your voucher.
  # @param [Hash] opts the optional parameters
  # @option opts [VoucherUploadFileRequest] :voucher_upload_file_request File to upload
  # @return [VoucherUploadFile201Response]
  describe 'voucher_upload_file test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
