require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CreditNoteApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CreditNoteApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CreditNoteApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CreditNoteApi' do
    it 'should create an instance of CreditNoteApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CreditNoteApi)
    end
  end

  # unit tests for book_credit_note
  # Book a credit note
  # Booking the credit note with a transaction is probably the most important part in the bookkeeping process.&lt;br&gt; There are several ways on correctly booking a credit note, all by using the same endpoint.&lt;br&gt; Conveniently, the booking process is exactly the same as the process for invoices and vouchers.&lt;br&gt; For this reason, you can have a look at it in the &lt;a href&#x3D;&#39;#tag/Invoice/How-to-book-an-invoice&#39;&gt;invoice chapter&lt;/a&gt; and all you need to do is to change \&quot;Invoice\&quot; into \&quot;CreditNote\&quot; in the URL.
  # @param credit_note_id ID of credit note to book
  # @param [Hash] opts the optional parameters
  # @option opts [BookCreditNoteRequest] :book_credit_note_request Booking data
  # @return [BookCreditNote200Response]
  describe 'book_credit_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_credit_note_from_invoice
  # Creates a new creditNote from an invoice
  # Use this endpoint to create a new creditNote from an invoice.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateCreditNoteFromInvoiceRequest] :create_credit_note_from_invoice_request 
  # @return [CreateCreditNoteFromInvoice201Response]
  describe 'create_credit_note_from_invoice test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_credit_note_from_voucher
  # Creates a new creditNote from a voucher
  # **Not supported with sevdesk-Update 2.0**  Use this endpoint to create a new creditNote from a voucher. 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateCreditNoteFromVoucherRequest] :create_credit_note_from_voucher_request 
  # @return [CreateCreditNoteFromInvoice201Response]
  describe 'create_credit_note_from_voucher test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for createcredit_note
  # Create a new creditNote
  # The list of parameters starts with the credit note array.&lt;br&gt; This array contains all required attributes for a complete credit note.&lt;br&gt; Most of the attributes are covered in the credit note attribute list, there are only two parameters standing out, namely &lt;b&gt;mapAll&lt;/b&gt; and &lt;b&gt;objectName&lt;/b&gt;.&lt;br&gt; These are just needed for our system and you always need to provide them.&lt;br&gt; The list of parameters then continues with the credit note position array.&lt;br&gt; With this array you have the possibility to add multiple positions at once.&lt;br&gt; In the example it only contains one position, again together with the parameters &lt;b&gt;mapAll&lt;/b&gt; and &lt;b&gt;objectName&lt;/b&gt;, however, you can add more credit note positions by extending the array.&lt;br&gt; So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \&quot;1\&quot; instead of \&quot;0\&quot;.&lt;br&gt;&lt;br&gt; The list ends with the five parameters creditNotePosDelete, discountSave, discountDelete, takeDefaultAddress and forCashRegister.&lt;br&gt; They only play a minor role if you only want to create a credit note but we will shortly explain what they can do.&lt;br&gt; With creditNotePosDelete you have to option to delete credit note positions as this request can also be used to update credit notes.&lt;br&gt; Both discount parameters are deprecated and have no use for credit notes, however they need to be provided in case you want to use the following two parameters.&lt;br&gt; With takeDefaultAddress you can specify that the first address of the contact you are using for the credit note is taken for the credit note address attribute automatically, so you don&#39;t need to provide the address yourself.&lt;br&gt; Finally, the forCashRegister parameter needs to be set to &lt;b&gt;true&lt;/b&gt; if your credit note is to be booked on the cash register.&lt;br&gt; If you want to know more about these parameters, for example if you want to use this request to update credit notes, feel free to contact our support.&lt;br&gt; Finally, after covering all parameters, they only important information left, is that the order of the last five attributes always needs to be kept.&lt;br&gt; You will also always need to provide all of them, as otherwise the request won&#39;t work properly.
  # @param [Hash] opts the optional parameters
  # @option opts [SaveCreditNote] :save_credit_note Creation data. Please be aware, that you need to provide at least all required parameter      of the credit note model!
  # @return [SaveCreditNoteResponse]
  describe 'createcredit_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_note_enshrine
  # Enshrine
  # Sets the current date and time as a value for the property &#x60;enshrined&#x60;.&lt;br&gt; This operation is only possible if the status is \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;) or higher.  Enshrined credit notes cannot be changed. This operation cannot be undone. 
  # @param credit_note_id ID of the credit note to enshrine
  # @param [Hash] opts the optional parameters
  # @return [CheckAccountTransactionEnshrine200Response]
  describe 'credit_note_enshrine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_note_get_pdf
  # Retrieve pdf document of a credit note
  # Retrieves the pdf document of a credit note with additional metadata.
  # @param credit_note_id ID of credit note from which you want the pdf
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download If u want to download the pdf of the credit note.
  # @option opts [Boolean] :prevent_send_by Defines if u want to send the credit note.
  # @return [CreditNoteGetPdf200Response]
  describe 'credit_note_get_pdf test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_note_reset_to_draft
  # Reset status to draft
  # Resets the status to \&quot;Draft\&quot; (&#x60;\&quot;status\&quot;: \&quot;100\&quot;&#x60;).&lt;br&gt; This is only possible if the credit note has the status \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;).&lt;br&gt; If it has a higher status use [CreditNote/{creditNoteId}/resetToOpen](#tag/CreditNote/operation/creditNoteResetToOpen) first. 
  # @param credit_note_id ID of the credit note to reset
  # @param [Hash] opts the optional parameters
  # @return [CreditNoteResetToDraft200Response]
  describe 'credit_note_reset_to_draft test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_note_reset_to_open
  # Reset status to open
  # Resets the status \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;). Linked transactions will be unlinked.&lt;br&gt; This is not possible if the credit note itself or one of its transactions (CheckAccountTransaction) is already enshrined.  This endpoint cannot be used to increase the status to \&quot;Open\&quot; (&#x60;\&quot;status\&quot;: \&quot;200\&quot;&#x60;).&lt;br&gt; Use [CreditNote/{creditNoteId}/sendBy](#tag/CreditNote/operation/creditNoteSendBy) / [CreditNote/{creditNoteId}/sendViaEmail](#tag/CreditNote/operation/sendCreditNoteViaEMail) instead. 
  # @param credit_note_id ID of the credit note to reset
  # @param [Hash] opts the optional parameters
  # @return [CreditNoteResetToOpen200Response]
  describe 'credit_note_reset_to_open test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_note_send_by
  # Mark credit note as sent
  # Marks an credit note as sent by a chosen send type.
  # @param credit_note_id ID of credit note to mark as sent
  # @param [Hash] opts the optional parameters
  # @option opts [CreditNoteSendByRequest] :credit_note_send_by_request Specify the send type
  # @return [ModelCreditNoteResponse]
  describe 'credit_note_send_by test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for deletecredit_note
  # Deletes an creditNote
  # @param credit_note_id Id of creditNote resource to delete
  # @param [Hash] opts the optional parameters
  # @return [DeleteCheckAccount200Response]
  describe 'deletecredit_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_credit_notes
  # Retrieve CreditNote
  # There are a multitude of parameter which can be used to filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Status of the CreditNote
  # @option opts [String] :credit_note_number Retrieve all CreditNotes with this creditNote number
  # @option opts [Integer] :start_date Retrieve all CreditNotes with a date equal or higher
  # @option opts [Integer] :end_date Retrieve all CreditNotes with a date equal or lower
  # @option opts [Integer] :contact_id Retrieve all CreditNotes with this contact. Must be provided with contact[objectName]
  # @option opts [String] :contact_object_name Only required if contact[id] was provided. &#39;Contact&#39; should be used as value.
  # @return [GetCreditNotes200Response]
  describe 'get_credit_notes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for getcredit_note_by_id
  # Find creditNote by ID
  # Returns a single creditNote
  # @param credit_note_id ID of creditNote to return
  # @param [Hash] opts the optional parameters
  # @return [GetCreditNotes200Response]
  describe 'getcredit_note_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for send_credit_note_by_printing
  # Send credit note by printing
  # Sending a credit note to end-customers is an important part of the bookkeeping process.&lt;br&gt; Depending on the way you want to send the credit note, you need to use different endpoints.&lt;br&gt; Let&#39;s start with just printing out the credit note, meaning we only need to render the pdf.
  # @param credit_note_id ID of creditNote to return
  # @param send_type the type you want to print.
  # @param [Hash] opts the optional parameters
  # @return [ModelCreditNoteSendByWithRender]
  describe 'send_credit_note_by_printing test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for send_credit_note_via_e_mail
  # Send credit note via email
  # This endpoint sends the specified credit note to a customer via email.&lt;br&gt;      This will automatically mark the credit note as sent.&lt;br&gt;      Please note, that in production an credit note is not allowed to be changed after this happened!
  # @param credit_note_id ID of credit note to be sent via email
  # @param [Hash] opts the optional parameters
  # @option opts [SendCreditNoteViaEMailRequest] :send_credit_note_via_e_mail_request Mail data
  # @return [SendCreditNoteViaEMail201Response]
  describe 'send_credit_note_via_e_mail test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for updatecredit_note
  # Update an existing creditNote
  # Update a creditNote
  # @param credit_note_id ID of creditNote to update
  # @param [Hash] opts the optional parameters
  # @option opts [ModelCreditNoteUpdate] :model_credit_note_update Update data
  # @return [ModelCreditNoteResponse]
  describe 'updatecredit_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
