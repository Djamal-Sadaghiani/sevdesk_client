require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ExportApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ExportApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ExportApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExportApi' do
    it 'should create an instance of ExportApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ExportApi)
    end
  end

  # unit tests for export_contact
  # Export contact
  # Contact export as csv
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportContact200Response]
  describe 'export_contact test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_credit_note
  # Export creditNote
  # Export all credit notes as csv
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportCreditNote200Response]
  describe 'export_credit_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_datev
  # Export datev
  # Datev export as zip with csv´s. Before you can perform the datev export, you must first set the \&quot;accountingYearBegin\&quot;. To do this, you must use the &lt;a href&#x3D;&#39;#tag/Export/operation/updateExportConfig&#39;&gt;updateExportConfig&lt;/a&gt; endpoint.
  # @param start_date the start date of the export as timestamp
  # @param end_date the end date of the export as timestamp
  # @param scope Define what you want to include in the datev export. This parameter takes a string of 5 letters. Each stands for a model that should be included. Possible letters are: ‘E’ (Earnings), ‘X’ (Expenditure), ‘T’ (Transactions), ‘C’ (Cashregister), ‘D’ (Assets). By providing one of those letter you specify that it should be included in the datev export. Some combinations are: ‘EXTCD’, ‘EXTD’ …
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download Specifies if the document is downloaded
  # @option opts [Boolean] :with_unpaid_documents include unpaid documents
  # @option opts [Boolean] :with_enshrined_documents include enshrined documents
  # @option opts [Boolean] :enshrine Specify if you want to enshrine all models which were included in the export
  # @return [Object]
  describe 'export_datev test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_invoice
  # Export invoice
  # Export all invoices as csv
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportInvoice200Response]
  describe 'export_invoice test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_invoice_zip
  # Export Invoice as zip
  # Export all invoices as zip
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportInvoiceZip200Response]
  describe 'export_invoice_zip test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_transactions
  # Export transaction
  # Export all transactions as csv
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportTransactions200Response]
  describe 'export_transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_voucher
  # Export voucher as zip
  # Export all vouchers as zip
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportVoucher200Response]
  describe 'export_voucher test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_voucher_zip
  # Export voucher zip
  # export all vouchers as zip
  # @param sev_query 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :download 
  # @return [ExportVoucherZip200Response]
  describe 'export_voucher_zip test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_export_config
  # Update export config
  # Update export config to export datev CSV
  # @param sev_client_id id of sevClient
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateExportConfigRequest] :update_export_config_request Specify the update
  # @return [CheckAccountTransactionEnshrine200Response]
  describe 'update_export_config test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
